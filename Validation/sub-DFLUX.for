
      module sharedata

C     Define parameters
      INTEGER, PARAMETER :: elm_min=41, elm_max=52, t_incs=300000
      REAL, PARAMETER :: w_init=1.0e-3
      REAL, PARAMETER :: t_init_deg=37.0, t_init=t_init_deg+273.0

C     Define and set initial values of shared variables
      REAL :: Qout(elm_min:elm_max,4,0:t_incs)
      REAL :: dwdt(elm_min:elm_max,4,0:t_incs)
      REAL :: w(elm_min:elm_max,4,0:t_incs)
      REAL :: temperature(elm_min:elm_max,4,0:t_incs)

      CONTAINS

        subroutine initialise()

          Qout=0.0
          dwdt=0.0
          w=w_init
          temperature=t_init

        end subroutine initialise

      end module sharedata

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      subroutine DFLUX(FLUX,SOL,KSTEP,KINC,TIME,NOEL,NPT,COORDS,JLTYP,
     1                 TEMP,PRESS,SNAME)

      use sharedata

      include 'ABA_PARAM.INC'

      dimension FLUX(2), TIME(2), COORDS(3)
      character*80 SNAME

C ----------------------------------------------------------------------

C     User coding to define FLUX(1) and FLUX(2)
C     -----------------------------------------

C     NOTES:
C     ------
C     (1) Must use non-linear analysis type and specify SOL if the flux
C         is a function of temperature (the solution variable SOL)
C
C     (2) FLUX(2) should be specified if flux is a strong function of 
C         temperature in a heat transfer analysis to help convergence.
C       
C     (3) Used in conjunction with *DFLUX in the inp file using the syntax:
C
C         *DFLUX, OP=NEW (or OP=MOD)
C         elset_name, BFNU,
C
C         where more than one line can be specified. Note that no value is 
C         required for non-uniform distributed fluxes (for BFNU)
C       
C     (4) Units of FLUX(1) for J,mm,s,deg are mW/mm3 or mJ/(s.mm3)
C       
C     (5) Units of FLUX(2) for J,mm,s,deg are mW/(mm3.T)
C
C     For the current job:
C     --------------------     
C     (6) Polymerization fraction at a point is independent of the value
C         at its neighbours. Therefore can use explicit formulation
C     
C ----------------------------------------------------------------------

C     User variables
      REAL, PARAMETER :: Tinf_deg=23.0, Tinf=273.0+Tinf_deg
      REAL, PARAMETER :: hconv=5000.0, delT=0.01
      REAL :: Qout_dum,dwdt_dum,w_dum,wpi,dt,step_time(0:t_incs)=0.0
      REAL :: sol_dum,Qout1,dwdt1,w1,T1,Qout2,dwdt2,w2,T2

C ----------------------------------------------------------------------

      if (kinc>=1) then

C       For surfaces fluxes and body fluxes
        if (JLTYP==0) then

          FLUX(1) = -hconv*(SOL-Tinf)
          FLUX(2) = -hconv

        elseif (JLTYP==1) then

C         Store step time
          step_time(KINC)=TIME(1)

C         Calculate time step size
          dt=step_time(KINC)-step_time(KINC-1)

C         Calculate rate of change of polyermization
          wpi=w(NOEL,NPT,KINC-1)
          sol_dum=SOL
          CALL polymerization(Qout_dum,dwdt_dum,w_dum,wpi,dt,sol_dum)

C         Capture output from subroutine polymerization
          Qout(NOEL,NPT,KINC) = Qout_dum
          dwdt(NOEL,NPT,KINC) = dwdt_dum
          w(NOEL,NPT,KINC)    = w_dum

C         Set FLUX(1) to the heat generated by the polymerization process
          FLUX(1)=Qout(NOEL,NPT,KINC)

C         Calculate FLUX(2) - the rate of change of the flux wrt temperature
C         at this point - to force solver to iterate and help convergence
          T1=SOL-delT
          T2=SOL+delT
          CALL polymerization(Qout1,dwdt1,w1,wpi,dt,T1)
          CALL polymerization(Qout2,dwdt2,w2,wpi,dt,T2)
          FLUX(2)=(Qout2-Qout1)/(T2-T1)

C         write(*,*) FLUX(1), FLUX(2)

        end if

      end if

C ----------------------------------------------------------------------

      return
      end

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      subroutine polymerization(Qout,dwdt,w,wpi,dt,T)

C     This subroutine is used to calculate the rate of change of the fraction
C     of cement polymerization that has occurred. From this the heat 
C     generated by this exothermic reaction can be calculated. 

C     All equations and variable values are taken from:
C     Quarini et al, Numerical predictions of the thermal behaviour and resultant
C     effects of grouting cements while setting prosthetic components in bone,
C     J Engineering in Medicine, 2006, 220:625-634

      REAL, PARAMETER :: Tg_deg=105.0, Tg=273.0+Tg_deg
      REAL :: dwdt, w, wpi, wmax, m, n, p, K, Ko, Eo, T, H
      REAL :: Qout, dt, R, density_cement

C     Set variable values (from Table 1 - Li et al 2003)
      Ko = 5.206e+09            ! 1/s
      Eo = 6.7891e+7            ! mJ/mol
      R = 8.314e+3              ! mJ/(mol.K)
      m = 1.05                  ! non-dimensional
      n = 1.10                  ! non-dimensional
      p = 0                     ! non-dimensional
      H = 1.0e+11               ! mJ/tonne
      density_cement = 1.1e-9   ! tonne/mm3

C     Calculate wmax (function of temperature)
      if (T<=Tg) then
        wmax=(T/Tg)
      elseif (T>Tg) then
        wmax=1.0
      end if

C     Ensure w within allowable limits     
      if (wpi>wmax) wpi=wmax

C     Calculate function K
      K=Ko*exp(-Eo/(R*T))

C     Update polymerization fraction
      w = wpi + dt*K*(wpi**m)*((wmax-wpi)**n)*(1.0-wpi)**p

C     write(*,*) wpi, w, K, (wmax-wpi)**n, T

C     Calculate rate of change of polymerization fraction
      dwdt = (w-wpi)/dt

C     Calculate heat generated by polymerization process at this point
      Qout = density_cement*H*dwdt 

      return
      end

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      subroutine UVARM(UVAR,DIRECT,T,TIME,DTIME,CMNAME,ORNAME,NUVARM,
     1                 NOEL,NPT,LAYER,KSPT,KSTEP,KINC,NDI,NSHR,COORD,
     2                 JMAC,JMATYP,MATLAYO,LACCFLA)


      use sharedata

      include 'ABA_PARAM.INC'

      character*80 CMNAME,ORNAME
      character*3 FLGRAY(15)
      dimension UVAR(NUVARM),DIRECT(3,3),T(3,3),TIME(2)
      dimension ARRAY(15),JARRAY(15),JMAC(*),JMATYP(*),COORD(*)

C ----------------------------------------------------------------------

C     User variables
      integer :: kounter=0

C ----------------------------------------------------------------------

      if (kounter/=1) then
        CALL initialise()
        kounter=1
      end if

      UVAR(1) = Qout(NOEL,NPT,KINC)
      UVAR(2) = dwdt(NOEL,NPT,KINC)
      UVAR(3) = w(NOEL,NPT,KINC)
      UVAR(4) = temperature(NOEL,NPT,KINC)

      return
      end

