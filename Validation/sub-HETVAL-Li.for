
      module sharedata

C     Define parameters
      DOUBLE PRECISION, PARAMETER :: w_init=1.019D-4
      INTEGER, PARAMETER :: elm_min=41, elm_max=65

C     Define and set initial values of shared variables
      DOUBLE PRECISION :: w(elm_min:elm_max,4), wpi(elm_min:elm_max,4)
      INTEGER :: nnoel, nnpt, kkinc, whichstep(elm_min:elm_max,4)

      CONTAINS

        subroutine initialise()

          w=w_init
          whichstep=0

        end subroutine initialise

      end module sharedata

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      subroutine USDFLD(FIELD,STATEV,PNEWDT,DIRECT,T,CELENT,TIME,DTIME,
     1      CMNAME,ORNAME,NFIELD,NSTATV,NOEL,NPT,LAYER,KSPT,KSTEP,KINC,
     2      NDI,NSHR,COORD,JMAC,JMATYP,MATLAYO,LACCFLA)

      use sharedata

      include 'ABA_PARAM.INC'

      character*80 CMNAME,ORNAME
      character*3 FLGRAY(15)
      dimension FIELD(NFIELD),STATEV(NSTATV),DIRECT(3,3),T(3,3),TIME(2)
      dimension ARRAY(15),JARRAY(15),JMAC(*),JMATYP(*),COORD(*)

C ----------------------------------------------------------------------

C     User variables
      INTEGER :: kounter=0

C ----------------------------------------------------------------------

C     NOTES:
C     ------
C     (1) One of the material properties must be a function of a field
C         variable otherwise this subroutine is not called. This can be
C         either density, conductivity or specific heat

C ----------------------------------------------------------------------

C     Call subroutine initialise in USDFLD as subroutine USDFLD is called
C     before subroutine HETVAL
      if (kounter/=1) then
        CALL initialise()
        kounter=1
      end if

      if (CMNAME(1:6)=='CEMENT') then

C       Subroutine HETVAL does not have NOEL, NPT or KINC passed in so
C       make them available via module sharedata
        nnoel = NOEL
        nnpt  = NPT
        kkinc = KINC

      end if

C ----------------------------------------------------------------------

      return
      end

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      SUBROUTINE HETVAL(CMNAME,TEMP,TIME,DTIME,STATEV,FLUX,PREDEF,DPRED)

      use sharedata

      INCLUDE 'ABA_PARAM.INC'

      CHARACTER*80 CMNAME
      DIMENSION TEMP(2),STATEV(*),PREDEF(*),TIME(2),FLUX(2),DPRED(*)
     
C ----------------------------------------------------------------------

C     User variables
      REAL, PARAMETER :: delT=0.1
      DOUBLE PRECISION :: w_dum,wpi_dum,w1,w2
      REAL :: Qout, dwdt,temperature,dt
      REAL :: Qout1,dwdt1,T1,Qout2,dwdt2,T2

C ----------------------------------------------------------------------

      if (kkinc>=1) then

C       At the start of each increment set wpi to the value of w at the 
C       previous increment
        if (whichstep(nnoel,nnpt)/=kkinc) then
          wpi(nnoel,nnpt)=w(nnoel,nnpt)
          whichstep(nnoel,nnpt)=kkinc
        end if

C       Calculate rate of change of polyermization
        wpi_dum=wpi(nnoel,nnpt)
        dt=DTIME
        temperature=TEMP(1)
        CALL polymerization(Qout,dwdt,w_dum,wpi_dum,dt,temperature,3)

C       Capture output from subroutine polymerization
        w(nnoel,nnpt) = w_dum

C       Set FLUX(1) to the heat generated by the polymerization process
        FLUX(1)=Qout

C       Calculate FLUX(2) - the rate of change of the flux wrt temperature
C       at this point - to force solver to iterate and help convergence
        T1=TEMP(1)-delT
        T2=TEMP(1)+delT
        CALL polymerization(Qout1,dwdt1,w1,wpi,dt,T1,3)
        CALL polymerization(Qout2,dwdt2,w2,wpi,dt,T2,3)
        FLUX(2)=(Qout2-Qout1)/(T2-T1)

        STATEV(1) = w(nnoel,nnpt)

      end if

C ----------------------------------------------------------------------

      return
      end

C ----------------------------------------------------------------------
C ----------------------------------------------------------------------

      subroutine polymerization(Qout,dwdt,w,wpi,dt,temperature,ref)

      implicit none

C     This subroutine is used to calculate the rate of change of the fraction
C     of cement polymerization that has occurred. From this the heat 
C     generated by this exothermic reaction can be calculated. 

C     All equations and variable values are taken from:
C     Quarini et al, Numerical predictions of the thermal behaviour and resultant
C     effects of grouting cements while setting prosthetic components in bone,
C     J Engineering in Medicine, 2006, 220:625-634

      INTEGER:: ref, p
      DOUBLE PRECISION :: w, wpi 
      REAL :: Qout, dwdt, wmax, temperature, dt
      REAL:: R, m, n, K, Ko, Eo, H, density_cement, Tg_deg, Tg

C     Set common variables
      density_cement = 1.1e-9       ! tonne/mm3 
      R = 8.314e+3                  ! mJ/(mol.K)

C     Set polymerization variables     
      select case (ref)
      case(1)
C       Brozacchiello et al, 1998 [7] - Listing 1
        Ko = 1.2088e+04             ! 1/s
        Eo = 3.3240e+07             ! mJ/mol
        m = 0.98                    ! non-dimensional
        n = 1.14                    ! non-dimensional
        p = 0                       ! non-dimensional
        H = 1.0e+11                 ! mJ/tonne
      case(2)
C       Brozacchiello et al, 1998 [7] - Listing 2
        Ko = 9.4840e+03             ! 1/s
        Eo = 3.1270e+07             ! mJ/mol
        m = 0.98                    ! non-dimensional
        n = 1.064                   ! non-dimensional
        p = 0                       ! non-dimensional
        H = 1.23e+11                ! mJ/tonne
      case(3)
C       Li et al, 2003 [13]
        Ko = 5.206e+09              ! 1/s
        Eo = 6.7891e+07             ! mJ/mol
        m = 1.05                    ! non-dimensional
        n = 1.10                    ! non-dimensional
        p = 0                       ! non-dimensional
        H = 1.0e+11                 ! mJ/tonne
      end select

C     Set polymerization variable wmax
      select case (ref)
      case(1,2)
        Tg_deg=105.0                ! deg C
        Tg=273.0+Tg_deg             ! deg K
        if (temperature < Tg) then
          wmax=(temperature/Tg)
        else
          wmax=1.0
        end if
      case(3)
        wmax=1.0
      end select

C     Ensure w within allowable limits. Note that if wpi>wmax then (wmax-wpi)
C     in the polymerization equation will be negative and (wmax-wpi)**n will
C     not be defined. Therefore prevent this from occurring. This appears to 
C     occur when the temperature at the integration point is dropping such that
C     wmax is also dropping (when wmax is a function of temperature).
      if (wpi>wmax) wpi=wmax

C     Calculate function K
      K=Ko*exp(-Eo/(R*temperature))

C     Update polymerization fraction using backwards difference
      w = wpi + dt*K*(wpi**m)*((wmax-wpi)**n)*(1.0-wpi)**p

C     When temperature starts to decrease then the rate of change of the 
C     polymerization fraction, dwdt, will become negative (when wmax is a function
C     of temperature). The polymerization fraction will then drop, although this
C     is not physically possible. Therefore prevent this from occurring.
      if (w<wpi) w=wpi

C     Calculate rate of change of polymerization fraction
      dwdt = (w-wpi)/dt

C     Calculate heat generated by polymerization process at this point
      Qout = density_cement*H*dwdt 

      return
      end

